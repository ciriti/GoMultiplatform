
// TODO apply the plugin
apply plugin: 'kotlin-multiplatform'
apply plugin: 'com.android.library'
apply plugin: 'kotlinx-serialization'
apply plugin: 'kotlin-native-cocoapods'

ext{
    ktor = "1.3.1"
    coroutines = "1.3.5"
    serialization = "0.13.0"
}

// CocoaPods requires the podspec to have a version.
version = "1.0"

// TODO create the kotlin DSL
kotlin {

    android()
    // TODO  add the targets
    targets {
        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") \
                              ? presets.iosArm64 : presets.iosX64
        fromPreset(iOSTarget, 'ios') {
            binaries {
                framework('CommonCode'){
                    freeCompilerArgs += "-Xno-objc-generics"
                }
            }
        }
    }
    // TODO add the source set
    sourceSets {

        all {
            languageSettings {
                useExperimentalAnnotation('kotlin.Experimental')
            }
        }

        // TODO add the source set
        commonMain {
            dependencies{
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines"

                // serialization
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization"

                // ktor
                implementation "io.ktor:ktor-client-core:$ktor"
                implementation "io.ktor:ktor-client-json:$ktor"
                implementation "io.ktor:ktor-client-serialization:$ktor"
            }
        }
        commonTest {
            dependencies{
                implementation "org.jetbrains.kotlin:kotlin-test-common:$kotlin_version"
                implementation "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlin_version"
            }
        }

        androidMain {
            dependencies{
                implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization"

                // ktor
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines"
                implementation "io.ktor:ktor-client-android:$ktor"
                implementation "io.ktor:ktor-client-core-jvm:$ktor"
                implementation "io.ktor:ktor-client-json-jvm:$ktor"
                implementation "io.ktor:ktor-client-okhttp:$ktor"
                implementation "io.ktor:ktor-client-serialization-jvm:$ktor"
            }
        }
        androidTest {
            dependencies{
                implementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
                implementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
                implementation "io.mockk:mockk:1.9.3"
                implementation "io.ktor:ktor-client-mock-jvm:$ktor"
            }
        }

        iosMain {
            dependencies{

                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization"

                // ktor
                implementation "io.ktor:ktor-client-ios:$ktor"
                implementation "io.ktor:ktor-client-json-native:$ktor"
                implementation "io.ktor:ktor-client-serialization-iosx64:$ktor"
            }
        }
        iosTest {
            dependencies{
                implementation "org.jetbrains.kotlin:kotlin-test-common:$kotlin_version"
                implementation "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlin_version"
            }
        }
    }

    cocoapods {
        // Configure fields required by CocoaPods.
        summary = "Some description for a Kotlin/Native module"
        homepage = "Link to a Kotlin/Native module homepage"

        // The name of the produced framework can be changed.
        // The name of the Gradle project is used here by default.
//        frameworkName = "my_framework"
    }
}

android {
    compileSdkVersion rootProject.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    packagingOptions {
        exclude 'META-INF/*.kotlin_module'
    }
}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}

// adding a task to copy the ios framework in another folder and add the gradle executable
task packForXCodeCommCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
    final def framework = kotlin.targets.ios.binaries.getFramework("CommonCode", mode)

    inputs.property "mode", mode
    dependsOn framework.linkTask

    from { framework.outputFile.parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}

// make the task being execute
tasks.build.dependsOn packForXCodeCommCode

task iosTestCommon(dependsOn: 'linkDebugTestIos') {
    doLast {
        def binary = kotlin.targets.ios.binaries.getTest("DEBUG").outputFile
        exec {
            commandLine 'xcrun', 'simctl', 'spawn', "iPhone XÊ€", binary.absolutePath
        }
    }
}